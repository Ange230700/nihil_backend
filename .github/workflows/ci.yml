# .github\workflows\ci.yml

name: Backend CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    services:
      mysql-user:
        image: mysql:8.3
        env:
          MYSQL_DATABASE: user_db
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3320:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      mysql-post:
        image: mysql:8.3
        env:
          MYSQL_DATABASE: post_db
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3321:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      USER_DATABASE_URL: mysql://root:${{ secrets.MYSQL_ROOT_PASSWORD }}@127.0.0.1:3320/user_db
      POST_DATABASE_URL: mysql://root:${{ secrets.MYSQL_ROOT_PASSWORD }}@127.0.0.1:3321/post_db
      NODE_ENV: test
      PORT: 3000

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Use Node 20 LTS
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Wait for MySQL
        run: |
          for i in {1..40}; do
            (nc -z 127.0.0.1 3320 && nc -z 127.0.0.1 3321) && echo "MySQL ready" && exit 0
            echo "Waiting for MySQL..."
            sleep 2
          done
          echo "MySQL did not start" && exit 1

      - uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-

      - name: Install deps
        run: npm ci

      - name: Generate Prisma schema
        run: npm run prisma:generate:all

      - name: Reset DBs and apply migrations
        run: |
          node user/scripts/prisma.mjs migrate reset --force --skip-seed
          node post/scripts/prisma.mjs migrate reset --force --skip-seed

      - name: Build all
        run: npm run build:all

      - name: Determine base/head for Nx
        run: |
          set -euxo pipefail
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git fetch --no-tags --depth=1 origin "${{ github.base_ref }}"
            echo "BASE=origin/${{ github.base_ref }}" >> "$GITHUB_ENV"
            echo "HEAD=${{ github.sha }}" >> "$GITHUB_ENV"
          else
            # On push, compare current commit to its immediate parent on the same branch
            echo "BASE=${{ github.sha }}~1" >> "$GITHUB_ENV"
            echo "HEAD=${{ github.sha }}" >> "$GITHUB_ENV"
          fi
          echo "Using BASE=$(cat $GITHUB_ENV | grep ^BASE= | cut -d= -f2) HEAD=$(cat $GITHUB_ENV | grep ^HEAD= | cut -d= -f2)"

      - name: Determine affected projects
        run: |
          set -euxo pipefail
          npx nx print-affected \
            --base="$BASE" --head="$HEAD" \
            --target=test --configuration=ci \
            --select=projects > affected.txt
          echo "Affected projects:"
          cat affected.txt || true

      - name: Test affected
        run: |
          set -euxo pipefail
          AFFECTED=$(cat affected.txt || true)
          if [ -z "$AFFECTED" ]; then
            echo "No affected projects. Skipping tests."
            exit 0
          fi
          npx nx run-many \
            --target=test --configuration=ci \
            --projects="$AFFECTED" --parallel=1
